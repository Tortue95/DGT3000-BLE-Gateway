/*
 * BLE Gateway Core Data Structures and Type Definitions
 *
 * This header defines the core data structures, enums, and types used
 * throughout the DGT3000 BLE Gateway application.
 * 
 * Copyright (C) 2025 Tortue - d*g*t*3*0*0*0*(at)*t*e*d*n*e*t*.*f*r (remove all "*" to contact me)
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 */

#ifndef BLE_GATEWAY_TYPES_H
#define BLE_GATEWAY_TYPES_H

#include <Arduino.h>
#include <ArduinoJson.h>
#include <freertos/FreeRTOS.h>
#include <freertos/queue.h>
#include <memory> // For std::unique_ptr

#include "00-GatewayConstants.h"

// =============================================================================
// ENUMERATIONS
// =============================================================================

/**
 * @enum SystemErrorCode
 * @brief Defines system-wide error codes for diagnostics and event reporting.
 */
enum class SystemErrorCode : uint16_t {
    SUCCESS = 0,
    
    // I2C Communication Errors
    I2C_COMMUNICATION_ERROR = 1000, ///< General I2C bus error.
    DGT_NOT_CONFIGURED = 1001,      ///< DGT clock is not configured for central control.
    I2C_CRC_ERROR = 1002,           ///< I2C message CRC check failed.
    DGT_NOT_CONNECTED = 1003,       ///< DGT clock is not connected or responding.
    
    // JSON Processing Errors
    JSON_PARSE_ERROR = 1100,        ///< Failed to parse an incoming JSON command.
    JSON_INVALID_COMMAND = 1101,    ///< The JSON command is missing required fields or is malformed.
    JSON_INVALID_PARAMETERS = 1102, ///< Parameters for a valid command are incorrect.
    
    // Command Execution Errors
    COMMAND_TIMEOUT = 1200,         ///< A command sent to the DGT clock did not receive an ACK in time.

    // General Errors
    UNKNOWN_ERROR = 2000            ///< An unknown or unhandled error occurred.
};

/**
 * @enum SystemState
 * @brief Defines the main operational states of the gateway application.
 */
enum class SystemState : uint8_t {
    UNINITIALIZED = 0,
    INITIALIZING,
    IDLE,           ///< System is running, but DGT clock is not yet initialized.
    ACTIVE,         ///< Normal operation with DGT clock connected and configured.
    ERROR_RECOVERY  ///< Attempting to recover from a connection or communication error.
};

/**
 * @enum ConnectionState
 * @brief Defines the connection status for both BLE and DGT clock interfaces.
 */
enum class ConnectionState : uint8_t {
    DISCONNECTED = 0,
    CONNECTED,
    CONFIGURED,
    ERROR
};

// =============================================================================
// CORE DATA STRUCTURES
// =============================================================================

/**
 * @struct RawBLECommand
 * @brief Holds raw JSON data received from a BLE client.
 */
struct RawBLECommand {
    char jsonData[JSON_COMMAND_BUFFER_SIZE];
    uint32_t timestamp;
    size_t length;
    
    RawBLECommand() : timestamp(0), length(0) {
        jsonData[0] = '\0';
    }
};

/**
 * @struct DGTEvent
 * @brief Represents an event generated by the system (e.g., button press, time update).
 */
struct DGTEvent {
    enum Type : uint8_t {
        TIME_UPDATE = 0,
        BUTTON_EVENT,
        CONNECTION_STATUS,
        ERROR_EVENT,
        SYSTEM_STATUS
    };
    
    Type type;
    uint32_t timestamp;
    JsonDocument data;
    uint8_t priority; // 0 = highest
    
    DGTEvent(Type eventType = TIME_UPDATE) : type(eventType), timestamp(millis()), priority(5) {}
    
    DGTEvent(const DGTEvent& other) {
        type = other.type;
        timestamp = other.timestamp;
        data = other.data;
        priority = other.priority;
    }
    
    DGTEvent& operator=(const DGTEvent& other) {
        if (this != &other) {
            type = other.type;
            timestamp = other.timestamp;
            data = other.data;
            priority = other.priority;
        }
        return *this;
    }
};

/**
 * @struct SystemStatus
 * @brief Holds a snapshot of the entire system's status for diagnostics.
 */
struct SystemStatus {
    SystemState systemState;
    ConnectionState bleConnectionState;
    ConnectionState dgtConnectionState;
    bool dgtConfigured;
    SystemErrorCode lastError;
    char lastErrorMessage[APP_MAX_ERROR_MESSAGE_LENGTH];
    uint32_t uptime;
    uint32_t commandsProcessed;
    uint32_t eventsGenerated;
    uint16_t freeHeap;
    uint8_t cpuUsageCore0;
    uint8_t cpuUsageCore1;
    int16_t temperature;
    uint32_t lastActivityTime;
    
    SystemStatus() {
        systemState = SystemState::UNINITIALIZED;
        bleConnectionState = ConnectionState::DISCONNECTED;
        dgtConnectionState = ConnectionState::DISCONNECTED;
        dgtConfigured = false;
        lastError = SystemErrorCode::SUCCESS;
        lastErrorMessage[0] = '\0';
        uptime = 0;
        commandsProcessed = 0;
        eventsGenerated = 0;
        freeHeap = 0;
        cpuUsageCore0 = 0;
        cpuUsageCore1 = 0;
        temperature = 0;
        lastActivityTime = 0;
    }
    
    void updateUptime() { uptime = millis(); }
    void updateActivity() { lastActivityTime = millis(); }
    
    void setError(SystemErrorCode error, const char* message = nullptr) {
        lastError = error;
        if (message) {
            strncpy(lastErrorMessage, message, APP_MAX_ERROR_MESSAGE_LENGTH - 1);
            lastErrorMessage[APP_MAX_ERROR_MESSAGE_LENGTH - 1] = '\0';
        } else {
            lastErrorMessage[0] = '\0';
        }
    }
    
    void clearError() {
        lastError = SystemErrorCode::SUCCESS;
        lastErrorMessage[0] = '\0';
    }
};

/**
 * @struct CommandResponse
 * @brief Represents a response to a command sent by a BLE client.
 */
struct CommandResponse {
    char id[APP_MAX_COMMAND_ID_LENGTH];
    bool success;
    JsonDocument result;
    SystemErrorCode errorCode;
    char errorMessage[APP_MAX_ERROR_MESSAGE_LENGTH];
    uint32_t timestamp;
    uint32_t executionTime;
    
    CommandResponse(const char* requestId = "") : success(false), errorCode(SystemErrorCode::SUCCESS), timestamp(0), executionTime(0) {
        if (requestId) {
            strncpy(id, requestId, APP_MAX_COMMAND_ID_LENGTH - 1);
            id[APP_MAX_COMMAND_ID_LENGTH - 1] = '\0';
        } else {
            id[0] = '\0';
        }
        errorMessage[0] = '\0';
    }
};

// =============================================================================
// TASK-SPECIFIC STRUCTURES
// =============================================================================

/**
 * @enum I2CTaskState
 * @brief Defines the operational states for the I2C management task.
 */
enum class I2CTaskState : uint8_t {
    IDLE = 0,
    INITIALIZED,
    RUNNING,
    STOPPING,
    ERROR
};

/**
 * @struct I2CTaskStats
 * @brief Holds statistics related to the I2C task's operation.
 */
struct I2CTaskStats {
    uint32_t uptime;
    uint32_t commandsReceived;
    uint32_t commandsExecuted;
    uint32_t commandsFailed;
    uint32_t eventsGenerated;
    uint32_t dgtErrors;
    uint32_t recoveryAttempts;
    uint32_t lastUpdateTime;
    
    I2CTaskStats() : uptime(0), commandsReceived(0), commandsExecuted(0), commandsFailed(0),
                     eventsGenerated(0), dgtErrors(0), recoveryAttempts(0), lastUpdateTime(0) {}
};

/**
 * @struct QueueHandles
 * @brief Container for FreeRTOS queue handles.
 */
struct QueueHandles {
    QueueHandle_t rawCommandQueue;
    QueueHandle_t eventQueue;
    QueueHandle_t responseQueue;
    
    QueueHandles() : rawCommandQueue(nullptr), eventQueue(nullptr), responseQueue(nullptr) {}
    
    bool isInitialized() const {
        return (rawCommandQueue != nullptr && eventQueue != nullptr && responseQueue != nullptr);
    }
};

/**
 * @struct QueueStats
 * @brief Holds statistics related to queue usage and performance.
 */
struct QueueStats {
    uint32_t commandsQueued;
    uint32_t commandsProcessed;
    uint32_t eventsQueued;
    uint32_t eventsProcessed;
    uint32_t queueOverflows;
    uint32_t queueTimeouts;
    uint16_t maxCommandQueueDepth;
    uint16_t maxEventQueueDepth;
    
    QueueStats() : commandsQueued(0), commandsProcessed(0), eventsQueued(0),
                   eventsProcessed(0), queueOverflows(0), queueTimeouts(0),
                   maxCommandQueueDepth(0), maxEventQueueDepth(0) {}
};

// =============================================================================
// UTILITY FUNCTIONS
// =============================================================================

/**
 * @brief Converts a SystemErrorCode enum to a human-readable string.
 */
const char* getErrorCodeString(SystemErrorCode error);

/**
 * @brief Converts a SystemState enum to a human-readable string.
 */
const char* getSystemStateString(SystemState state);

/**
 * @brief Converts a ConnectionState enum to a human-readable string.
 */
const char* getConnectionStateString(ConnectionState state);

/**
 * @brief Converts a DGTEvent::Type enum to a human-readable string.
 */
const char* getEventTypeString(DGTEvent::Type type);

#endif // BLE_GATEWAY_TYPES_H
